Server:
    - addr: str
    - port: int
    - sock: socket
    - listenThread: threading.Thread
    - listening: bool
    - handlers: dict[dict]
    - staticHandlers: dict
    - handler404 = Server.default404

    + __init__(self, addr: str, port: int)
        Intializes server.
    + start(self) -> None
        Begins listening on addr:port.
    + stop(self) -> None
        Signals to listening thread to stop.
    + default404(req: Request, match: re.Match, resp: Response) -> None
        Provides a 404 Handler, in the event a custom handler is not provided.
    + register(self, methods: tuple, uri: str) -> Function
        Decorator function for adding a handler func to
        handlers.
    + registerStatic(self, uri: str) -> Function
        Decorator function for adding a handler func to
        statisHandlers.
    + dispatch(self, req: Request, sock: socket, resp: Response) -> None
        Finds matching handler for request.  Passes Request, socket,
        and Response to handler.


    + accept(self, sock: socket, remoteAddr) -> None
        Handles accepted socket connections.
        Creates Response and Request objects.
        Attempts to dispatch the request.
    + listen(self) -> None
        Binds and listens on addr:port.
        Passes accepted connections to accept in a new thread.


StatusCode(Enum):
    - OK = (200,"OK")
    - NOT_FOUND = (400,"Not Found")

HTTPBase:
    - httpvers: str
    - body: str | bytes | None
    - headers: dict[str]
    - cookies: dict[str]
    - sock: socket = None
    
    + __init__(self,httpvers: str, body: str | bytes | None,
                headers: dict[str] | None, cookies: dict[str] | None,
                sock: socket | None)
    + formatHeaders(self) -> bytes
        Returns headers formatted to HTTP Response specs, as bytes.
    + abstract formatCookies(self) -> bytes
        Must implement this method in child class.
    + abstract format(self) -> bytes
        Must implement this method in child class.
    + send(self) -> None
        Sends formatted response via sock.

Response(HTTPBase):
    - statuscode: StatusCode

    + __init__(self, httpvers="HTTP/1.1", statuscode: StatusCode = StatusCode.OK,
            body: str | bytes | None = None, headers: dict[str] | None = None,
            cookies: dict[str] | None = None, sock: socket | None = None)
        Initializes response.
    + formatCookies(self) -> bytes
        Returns cookies formatted to HTTP Response specs, as bytes.
    + format(self) -> bytes
        Returns response formatted to HTTP Response specs, as bytes.

Request(HTTPBase):
    - method: str
    - uri: str
    - form: Form | None
    - raw: bytes | None

    + __init__(self, httpvers="HTTP/1.1", method: str, uri: str, body: bytes | str,
            headers: dict[str] | None = None, cookies: dict[str] | None = None,
            form: Form | None = None, raw: bytes | None = None, sock: socket | None = None)
        Initializes request.
    + formatCookies(self) -> bytes
        Returns cookies formatted to HTTP Request specs, as bytes.
    + format(self) -> bytes
        Returns request formatted to HTTP Request specs.
    + fromBytes(data: bytes) -> Request
        Returns Request parsed from data.
    + fromSocket(sock: socket) -> Request
        Returns Request read from sock.

ContentType(Enum):
    - URLEnc = "application/x-www-form-urlencoded"
    - MultiPart = "multipart/form-data"

Form:
    - contentType: ContentType
    - boundary: bytes
    - _data: dict

    + __init__(self, contentType: ContentType, boundary: str | bytes | None = None)
        Initializes form.
    + addField(self, name: str, val: str | bytes,
                contentType: ContentType | str | None,
                filename: str | None) -> None
        Creates and inserts FormData into _data.
    + getField(self, name: str) -> FormData | None
        Returns FormData if found, else None.
    + fromURLEncStr(data: str) -> Form
        Returns Form parsed from data.
    + fromMultiPartBytes(data: bytes, contentType: ContentType,
                boundary: bytes) -> Form
        Returns Form parsed from data.
    + format(self) -> bytes
        Returns form formatted to HTTP Specs of ContentType.

@dataclass
FormData:
    - name: str
    - val: bytes
    - contentType: ContentType | str | None
    - filename: str | None

    + formatURLEnc(self) -> bytes
        Return FormData in URLEncoded format as bytes.
    + formatMultiPart(self) -> bytes
        Return FormData in MultiPart format as bytes.
    + asStr(self) -> str
        Return val as str.
    + asBytes(self) -> bytes
        Return val as bytes.
    + asBool(self) -> bool
        Return val as bool.
    + asInt(self) -> int
        Return val as int.