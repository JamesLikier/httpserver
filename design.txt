Server:
    - addr: str
    - port: int
    - sock: socket
    - listenThread: threading.Thread
    - listening: bool
    - handlers: dict[dict]
    - staticHandlers: dict
    - handler404 = Server.default404

    + __init__(self, addr: str, port: int)
        Intializes server.
    + start(self) -> None
        Begins listening on addr:port.
    + stop(self) -> None
        Signals to listening thread to stop.
    + default404(req: Request, match: Match, resp: Response, session, sessionHandler: SessionHandler):
        Provides a 404 Handler, in the event a custom handler is not provided.
    + @register404(self,func) -> Function
        Decorator function for adding a 404 handler.
    + @register(self, methods: tuple, uri: str) -> Function
        Decorator function for adding a handler func to
        handlers.
    + @registerStatic(self, uri: str) -> Function
        Decorator function for adding a handler func to
        statisHandlers.
    + dispatch(self, req: Request, sock: socket, resp: Response) -> None
        Finds matching handler for request.  Passes Request, socket,
        and Response to handler.
    + accept(self, conn: tuple(sock,remoteAddr)) -> None
        Handles accepted socket connections.
        Creates Response and Request objects.
        Attempts to dispatch the request.
    + listen(self) -> None
        Binds and listens on addr:port.
        Passes accepted connections to accept in a new thread.


StatusCode = namedtuple("StatusCode","code text")
STATUS_CODES = {
    404 = StatusCode(404,"Not Found")
    200 = StatusCode(200,"OK")
}

IncompleteStartline(Exception)

HTTPBase:
    - httpvers: str
    - body: str | bytes | None
    - headers: dict
    - cookies: dict
    - sock: socket = None
    
    + __init__(self,httpvers: str = "HTTP/1.1",
                body: str | bytes | None,
                headers: dict | None,
                cookies: dict | None,
                sock: socket | None)
    + formatStartline(self) -> bytes
        must implement this method in child class.
    + formatHeaders(self) -> bytes
        Returns headers formatted to HTTP Response specs, as bytes.
    + formatCookies(self) -> bytes
        Must implement this method in child class.
    + formatBody(self) -> bytes
        Returns body formatted to HTTP Specs, as bytes.
    + format(self) -> bytes
        Must implement this method in child class.
    + send(self, sock: socket | None = None) -> None
        Sends formatted response via sock or self.sock.

Response(HTTPBase):
    - statuscode: int

    + __init__(self, httpvers="HTTP/1.1", statuscode: StatusCode = STATUS_CODES[200],
            body: str | bytes | None = None, headers: dict[str] | None = None,
            cookies: dict[str] | None = None, sock: socket | None = None)
        Initializes response.
    + formatStartline(self) -> bytes
        Returns startline formatted to HTTP Response specs, as bytes.
    + formatCookies(self) -> bytes
        Returns cookies formatted to HTTP Response specs, as bytes.
    + format(self) -> bytes
        Returns response formatted to HTTP Response specs, as bytes.

Request(HTTPBase):
    - method: str
    - uri: str
    - form: Form | None
    - raw: bytes | None

    + __init__(self, httpvers="HTTP/1.1", method: str, uri: str, body: bytes | str,
            headers: dict[str] | None = None, cookies: dict[str] | None = None,
            form: Form | None = None, raw: bytes | None = None, sock: socket | None = None)
        Initializes request.
    + formatStartline(self) -> bytes
        Returns startline formatted to HTTP Request specs, as bytes.
        Raises IncompleteStartline if method or uri are empty str.
    + formatCookies(self) -> bytes
        Returns cookies formatted to HTTP Request specs, as bytes.
    + formatBody(self) -> bytes
        Returns body as bytes.
    + format(self) -> bytes
        Returns request formatted to HTTP Request specs.
    + fromBytes(data: bytes) -> Request
        Returns Request parsed from data.
    + fromSocket(sock: socket) -> Request
        Returns Request read from sock.

CONTENT_TYPES = {
    "URLEnc": "application/x-www-form-urlencoded",
    "MultiPart": "multipart/form-data"
}

Form(collections.abc.MutableMapping):
    - contentType: str
    - boundary: bytes
    - _data: dict

    + __init__(self, contentType: str = CONTENT_TYPES["URLEnc"],
                boundary: str | bytes | None = None)
        Initializes form.
    + __getitem__(self,key) -> Any
    + __setitem__(self,key,value)
    + __delitem__(self,key)
    + __iter__(self) -> Iterator
    + __len__(self) -> int
    + boundaryAsBytes(self) -> bytes
        Returns boundary as bytes.
    + fromURLEncStr(data: str) -> Form
        Returns Form parsed from data.
    + fromMultiPartBytes(data: bytes, boundary: bytes | str) -> Form
        Returns Form parsed from data.
    + format(self) -> bytes
        Returns form formatted to HTTP Specs of ContentType.

@dataclass
FormData:
    - name: str = "
    - val: bytes = b''
    - contentType: str | None = None
    - filename: str | None = None

    + formatURLEnc(self) -> bytes
        Return FormData in URLEncoded format as bytes.
    + formatMultiPart(self) -> bytes
        Return FormData in MultiPart format as bytes.
    + asStr(self) -> str
        Return val as str.
    + asBytes(self) -> bytes
        Return val as bytes.
    + asBool(self) -> bool
        Return val as bool.
    + asInt(self) -> int
        Return val as int.